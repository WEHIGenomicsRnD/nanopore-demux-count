params {
    outdir                  = "results"

    input_dir               = "$projectDir/.test/data"

    fwd_primer              = "GGGGGATAACATTGAACTTC"

    rev_primer              = "CCTAATATACGGACGCAATC"

    primer_mismatches       = 1

    barcode_length          = 12

    output_untrimmed        = true

    index_template_file     = "$projectDir/.test/data/indexes.txt"

    demultiplex             = true

    //number of bases to search for index 1 at start of read
    bases_num_r1            = 12
    //number of bases to search for index 2 at end of read
    //note that this number should be negative
    bases_num_r2            = -12

    idx_5p_mismatch         = 1

    idx_3p_mismatch         = 1

    // whether to use genomics database for index lookup
    // if false, barcode info has to be provided in the
    // index template file
    use_db                  = false

    // if you want to use a custom splitcode config file,
    // you can provide it here
    splitcode_config_file   = ""

    // if specified, use this location to load prebuilt conda environments
    conda_env_location      = ""

    // fasta file of guide sequences, leave blank to skip guide counting
    guides_fasta            = "$projectDir/.test/data/guides_simulated.fasta"
}

//SQL DB Plugin
plugins {
    id 'nf-sqldb@0.1.0'
}

sql {
    db {
        'my-db' {
              url = 'jdbc:mysql://pipelinepilot.hpc.wehi.edu.au:3306/genomics?useLegacyDatetimeCode=false&serverTimezone=Australia/Melbourne'
              user = 'genomics'
              password = secrets.DB
        }
    }
}

profiles {
    milton {
        conda.enabled = true
        cleanup = true
        apptainer.enabled = false
        apptainer.autoMounts = false
        singularity.enabled = false
        process {
            cpus = 1
            memory = { 8.GB * task.attempt }
            time = '12h'
            errorStrategy = { 'retry' }
            maxRetries = 4
            withLabel:SplitCode {
                module = 'splitcode/0.28.3'
            }
        }
    }
    test {
        conda.enabled = true
        singularity.enabled = true
        stubRun = true
        cleanup = false
        process.memory = '1 GB'
        process.cpus = 1
    }
    test_local {
        conda.enabled = true
        singularity.enabled = false
        stubRun = true
        cleanup = false
    }
    log {
        includeConfig 'logger.config'
    }
}
